name: Deploy AttackVisualizer

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}

      - name: Add DigitalOcean server to known hosts
        run: ssh-keyscan -H ${{ secrets.DO_IP }} >> ~/.ssh/known_hosts

      - name: Configure and activate log scraper
        run: |
          ssh root@${{ secrets.DO_IP }} << 'EOF'
          # Create the service and timer files
          [ ! -f /etc/systemd/system/log_scraper.service ] && cat <<EOL > /etc/systemd/system/log_scraper.service
          [Unit]
          Description=Run the AttackVisualizer log scraper

          [Service]
          ExecStart=/usr/bin/python3 /home/AttackVisualizer/backend/scripts/log_scraper.py
          Environment="POSTGRES_DB=${{ secrets.POSTGRES_DB }}"
          Environment="POSTGRES_USER=${{ secrets.POSTGRES_USER }}"
          Environment="POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}"
          Restart=always
          EOL

          [ ! -f /etc/systemd/system/log_scraper.timer ] && cat <<EOL > /etc/systemd/system/log_scraper.timer
          [Unit]
          Description=Run log scraper every 10 minutes

          [Timer]
          OnBootSec=10min
          OnUnitActiveSec=10min
          Unit=log_scraper.service

          [Install]
          WantedBy=timers.target
          EOL

          # Reload systemd and enable/start the timer
          systemctl daemon-reload
          systemctl enable log_scraper.timer
          systemctl start log_scraper.timer
          EOF

      - name: Deploy to server
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          ssh root@${{ secrets.DO_IP }} << 'EOF'
          # Clone or pull the repository
          git clone https://github.com/kevlocburn/AttackVisualizer.git /home/AttackVisualizer || (cd /home/AttackVisualizer && git pull)
          cd /home/AttackVisualizer

          # Bring down and rebuild the Docker containers
          docker-compose down
          docker-compose up -d --build

          # Configure Nginx
          cat <<EOL > /etc/nginx/conf.d/attackvisualizer.conf
          server {
              listen 80;
              server_name hack.kevinlockburner.com;

              return 301 https://\$host\$request_uri;
          }

          server {
              listen 443 ssl;
              server_name hack.kevinlockburner.com;

              ssl_certificate /etc/letsencrypt/live/hack.kevinlockburner.com/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/hack.kevinlockburner.com/privkey.pem;

              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers HIGH:!aNULL:!MD5;
              ssl_prefer_server_ciphers on;

              location /api/ {
                  proxy_pass http://localhost:8000/;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }

              location / {
                  proxy_pass http://localhost:3000/;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }
          EOL

          # Test and reload Nginx
          nginx -t && systemctl reload nginx || (echo "Nginx reload failed"; exit 1)

          # Restart scraper timer
          systemctl restart log_scraper.timer
          EOF
