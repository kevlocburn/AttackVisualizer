name: Deploy AttackVisualizer

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  ACTIONS_STEP_DEBUG: false
  REGISTRY: ghcr.io
  IMAGE_FRONTEND: ghcr.io/kevlocburn/attackvisualizer/attackvisualizer-frontend
  IMAGE_API: ghcr.io/kevlocburn/attackvisualizer/attackvisualizer-api

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write


    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Authenticate with GitHub Container Registry (GHCR)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Build and Push Docker Images to GHCR
        run: |
          docker build -t $IMAGE_FRONTEND:latest -f ./frontend/Dockerfile ./frontend
          docker build -t $IMAGE_API:latest -f ./backend/Dockerfile.api ./backend
          
          docker push $IMAGE_FRONTEND:latest
          docker push $IMAGE_API:latest
      - name: Add SSH Key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          log-public-key: false 

      - name: Add Known Hosts
        run: |
          ssh-keyscan -H ${{ secrets.DO_IP }} >> ~/.ssh/known_hosts 2>/dev/null
      - name: Pull Latest Code on Server
        run: |
          ssh root@${{ secrets.DO_IP }} << 'EOF'
          if [ ! -d /home/AttackVisualizer ]; then
            git clone git@github.com:kevlocburn/AttackVisualizer.git /home/AttackVisualizer
          else
            cd /home/AttackVisualizer && git pull
          fi
          EOF
      - name: Deploy Docker Images on Server
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        run: |
          ssh root@${{ secrets.DO_IP }} << 'EOF'
          cd /home/AttackVisualizer
          # Authenticate and Pull Latest Docker Images from GHCR
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
          # Remove Old Containers and Images
          docker-compose down
          docker system prune -af
          # Pull Latest Docker Images
          docker pull $IMAGE_FRONTEND:latest
          docker pull $IMAGE_API:latest
          # Verify Image IDs
          docker images $IMAGE_FRONTEND:latest
          docker images $IMAGE_API:latest
          # Deploy Updated Containers
          echo "::add-mask::${{ secrets.POSTGRES_USER }}"
          echo "::add-mask::${{ secrets.POSTGRES_PASSWORD }}"
          echo "::add-mask::${{ secrets.POSTGRES_DB }}"
          POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
          POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
          docker-compose up -d
          # Configure Nginx 
          cat <<EOL > /etc/nginx/conf.d/attackvisualizer.conf
          server {
              listen 80;
              server_name hack.kevinlockburner.com;
              return 301 https://\$host\$request_uri;
          }
          server {
              listen 443 ssl;
              server_name hack.kevinlockburner.com;
              ssl_certificate /etc/letsencrypt/live/hack.kevinlockburner.com/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/hack.kevinlockburner.com/privkey.pem;
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers HIGH:!aNULL:!MD5;
              ssl_prefer_server_ciphers on;
              location /api/ {
                  proxy_pass http://localhost:8000/;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
              location /ws/ {
                  proxy_pass http://localhost:8000/;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
              location / {
                  proxy_pass http://localhost:3000/;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }
          EOL
          nginx -t && systemctl reload nginx || (echo "Nginx reload failed"; exit 1)
          EOF