name: Deploy AttackVisualizer

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  ACTIONS_STEP_DEBUG: false 
  REGISTRY: ghcr.io
  IMAGE_FRONTEND: ghcr.io/kevlocburn/attackvisualizer/attackvisualizer-frontend
  IMAGE_API: ghcr.io/kevlocburn/attackvisualizer/attackvisualizer-api

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login $REGISTRY -u $GITHUB_ACTOR --password-stdin

      - name: Build and Push Docker Images
        run: |
          docker build -t $IMAGE_FRONTEND:latest -f ./frontend/Dockerfile ./frontend
          docker build -t $IMAGE_API:latest -f ./backend/Dockerfile.api ./backend

          docker push $IMAGE_FRONTEND:latest
          docker push $IMAGE_API:latest


      - name: Deploy on Server
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        run: |
            ssh root@${{ secrets.DO_IP }} << 'EOF'
            cd /home/AttackVisualizer
  
            # Pull latest images
            docker pull $IMAGE_FRONTEND:latest
            docker pull $IMAGE_API:latest
  
            # Stop and remove old containers
            docker-compose down
  
            # Deploy New Containers
            echo "::add-mask::${{ secrets.POSTGRES_USER }}"
            echo "::add-mask::${{ secrets.POSTGRES_PASSWORD }}"
            echo "::add-mask::${{ secrets.POSTGRES_DB }}"
            POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
            docker-compose up -d
  
            # Configure Global Nginx Settings (Place `limit_req_zone` Here)
            cat <<EOL > /etc/nginx/nginx.conf
            user nginx;
            worker_processes auto;
            pid /run/nginx.pid;
  
            events {
                worker_connections 1024;
            }
  
            http {
                include /etc/nginx/mime.types;
                default_type application/octet-stream;
                
                # Define the rate limit zone (GLOBAL)
                limit_req_zone \$binary_remote_addr zone=one:10m rate=10r/s;
  
                sendfile on;
                keepalive_timeout 65;
                include /etc/nginx/conf.d/*.conf;
            }
            EOL
  
            # Configure Site-Specific Nginx Settings (Using the Global `limit_req_zone`)
            cat <<EOL > /etc/nginx/conf.d/attackvisualizer.conf
            server {
                listen 80;
                server_name hack.kevinlockburner.com;
  
                return 301 https://\$host\$request_uri;
            }
  
            server {
                listen 443 ssl;
                server_name hack.kevinlockburner.com;
  
                ssl_certificate /etc/letsencrypt/live/hack.kevinlockburner.com/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/hack.kevinlockburner.com/privkey.pem;
  
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers HIGH:!aNULL:!MD5;
                ssl_prefer_server_ciphers on;
  
                location /api/ {
                    proxy_pass http://localhost:8000/;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                    
                    # Apply Rate Limit (this is now valid because `limit_req_zone` is defined globally)
                    limit_req zone=one burst=20 nodelay;
                }
  
                location /ws/ {
                    proxy_pass http://localhost:8000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
  
                location / {
                    proxy_pass http://localhost:3000/;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOL
  
            # Restart Nginx
            nginx -t && systemctl reload nginx || (echo "Nginx reload failed"; exit 1)
            EOF