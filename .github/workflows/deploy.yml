name: Deploy AttackVisualizer

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  ACTIONS_STEP_DEBUG: false
  REGISTRY: ghcr.io
  IMAGE_FRONTEND: ghcr.io/kevlocburn/attackvisualizer/attackvisualizer-frontend
  IMAGE_API: ghcr.io/kevlocburn/attackvisualizer/attackvisualizer-api

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write


    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Authenticate with GitHub Container Registry (GHCR)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Build and Push Docker Images to GHCR
        run: |
          docker build -t $IMAGE_FRONTEND:latest -f ./frontend/Dockerfile ./frontend
          docker build -t $IMAGE_API:latest -f ./backend/Dockerfile.api ./backend
          
          docker push $IMAGE_FRONTEND:latest
          docker push $IMAGE_API:latest

      - name: Add SSH Key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          log-public-key: false 

      - name: Add Known Hosts
        run: |
          ssh-keyscan -H ${{ secrets.DO_IP }} >> ~/.ssh/known_hosts 2>/dev/null

      - name: Pull Latest Code on Server
        run: |
          ssh root@${{ secrets.DO_IP }} << 'EOF'
          if [ ! -d /home/AttackVisualizer ]; then
            git clone git@github.com:kevlocburn/AttackVisualizer.git /home/AttackVisualizer
          else
            cd /home/AttackVisualizer && git pull
          fi
          EOF

      - name: Deploy Docker Images on Server
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        run: |
          ssh root@${{ secrets.DO_IP }} << 'EOF'
          cd /home/AttackVisualizer

          # Authenticate and Pull Latest Docker Images from GHCR
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
          docker pull $IMAGE_FRONTEND:latest
          docker pull $IMAGE_API:latest

          # Bring Down Old Containers
          docker-compose down

          # Deploy Updated Containers
          echo "::add-mask::${{ secrets.POSTGRES_USER }}"
          echo "::add-mask::${{ secrets.POSTGRES_PASSWORD }}"
          echo "::add-mask::${{ secrets.POSTGRES_DB }}"
          POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
          POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
          docker-compose up -d

          # Secure Nginx Configuration
          cat <<EOL > /etc/nginx/conf.d/attackvisualizer.conf
          server {
              listen 80;
              server_name hack.kevinlockburner.com;

              # Redirect HTTP to HTTPS
              return 301 https://\$host\$request_uri;
          }

          server {
              listen 443 ssl;
              server_name hack.kevinlockburner.com;

              ssl_certificate /etc/letsencrypt/live/hack.kevinlockburner.com/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/hack.kevinlockburner.com/privkey.pem;

              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers HIGH:!aNULL:!MD5;
              ssl_prefer_server_ciphers on;

              # Prevent Clickjacking, XSS, and Injection Attacks
              add_header X-Frame-Options DENY;
              add_header X-XSS-Protection "1; mode=block";
              add_header X-Content-Type-Options nosniff;
              add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'none'; script-src 'self'; object-src 'none';";

              # Block Bad Bots (Common Web Scrapers)
              if ($http_user_agent ~* (python|curl|wget|scrapy|httpclient)) {
                  return 403;
              }

              # Block Direct Server Access (Allow Only Cloudflare)
              set_real_ip_from 173.245.48.0/20;
              set_real_ip_from 103.21.244.0/22;
              set_real_ip_from 103.22.200.0/22;
              set_real_ip_from 103.31.4.0/22;
              set_real_ip_from 141.101.64.0/18;
              set_real_ip_from 108.162.192.0/18;
              set_real_ip_from 190.93.240.0/20;
              set_real_ip_from 188.114.96.0/20;
              set_real_ip_from 197.234.240.0/22;
              set_real_ip_from 198.41.128.0/17;
              set_real_ip_from 162.158.0.0/15;
              set_real_ip_from 104.16.0.0/13;
              set_real_ip_from 104.24.0.0/14;
              set_real_ip_from 172.64.0.0/13;
              set_real_ip_from 131.0.72.0/22;
              real_ip_header CF-Connecting-IP;

              # Rate Limiting (Prevents Bots From Spamming API)
              limit_req_zone $binary_remote_addr zone=api_rate:10m rate=10r/s;

              location /api/ {
                  proxy_pass http://localhost:8000/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto https;
                  
                  # Apply Rate Limiting
                  limit_req zone=api_rate burst=20 nodelay;
              }

              location /ws/ {
                  proxy_pass http://localhost:8000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto https;
              }

              location / {
                  proxy_pass http://localhost:3000/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto https;
              }
          }
          EOL

          # Restart Nginx
          nginx -t && systemctl reload nginx || (echo "Nginx reload failed"; exit 1)

          EOF