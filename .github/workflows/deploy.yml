name: Deploy AttackVisualizer

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_FRONTEND: ghcr.io/${{ github.repository }}/attackvisualizer-frontend
  IMAGE_API: ghcr.io/${{ github.repository }}/attackvisualizer-api

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Log in to GitHub Container Registry (GHCR)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Docker Images
        run: |
          docker build -t $IMAGE_FRONTEND:latest -f ./frontend/Dockerfile ./frontend
          docker build -t $IMAGE_API:latest -f ./backend/Dockerfile.api ./backend

          docker push $IMAGE_FRONTEND:latest
          docker push $IMAGE_API:latest

      - name: SSH into Server and Deploy Containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_IP }}
          username: root
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          script: |
            cd /home/AttackVisualizer

            # Pull Latest Containers
            docker pull $IMAGE_FRONTEND:latest
            docker pull $IMAGE_API:latest

            # Stop and Remove Old Containers
            docker-compose down

            # Deploy Updated Containers
            docker-compose up -d

            # Update Nginx Configuration
            cat <<EOL > /etc/nginx/conf.d/attackvisualizer.conf
            server {
                listen 80;
                server_name hack.kevinlockburner.com;

                return 301 https://\$host\$request_uri;
            }

            server {
                listen 443 ssl;
                server_name hack.kevinlockburner.com;

                ssl_certificate /etc/letsencrypt/live/hack.kevinlockburner.com/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/hack.kevinlockburner.com/privkey.pem;

                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers HIGH:!aNULL:!MD5;
                ssl_prefer_server_ciphers on;

                # Security Headers
                add_header X-Frame-Options DENY;
                add_header X-Content-Type-Options nosniff;
                add_header X-XSS-Protection "1; mode=block";
                add_header Content-Security-Policy "default-src 'self'; script-src 'self'; object-src 'none';";
                
                # Rate Limiting
                limit_req_zone \$binary_remote_addr zone=one:10m rate=5r/s;
                limit_conn_zone \$binary_remote_addr zone=addr:10m;

                location /api/ {
                    proxy_pass http://localhost:8000/;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                    limit_req zone=one burst=10 nodelay;
                    limit_conn addr 20;
                }

                location /ws/ {
                    proxy_pass http://localhost:8000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }

                location / {
                    proxy_pass http://localhost:3000/;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }

                # Block sensitive files & paths
                location ~* \.(env|config|sql|bak|git|svn|log)$ {
                    deny all;
                }

                location /wp-admin {
                    deny all;
                }

                location /wp-login.php {
                    deny all;
                }
            }
            EOL

            nginx -t && systemctl reload nginx || (echo "Nginx reload failed"; exit 1)
