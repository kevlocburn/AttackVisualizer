version: '3.8'

services:
  database:
    image: timescale/timescaledb:latest-pg14
    container_name: timescaledb
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      bash -c "
        echo 'POSTGRES_USER=${POSTGRES_USER}';
        echo 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}';
        echo 'POSTGRES_DB=${POSTGRES_DB}';
        exec docker-entrypoint.sh postgres
      "

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.api
    container_name: attack_visualizer_api
    depends_on:
      database:
        condition: service_healthy
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "8000:8000"
    restart: unless-stopped  
    volumes:
      - /var/log:/host_var_log:ro
    read_only: true  # Prevents API container from being modified
    tmpfs:
      - /tmp  # Ensures no writable temp directories

  frontend:
    build:
      context: ./frontend
    container_name: attack_visualizer_frontend
    depends_on:
      - api
    ports:
      - "3000:80"
    restart: unless-stopped
    read_only: true  # Prevents frontend container from being modified
    tmpfs:
      - /tmp  # Ensures no writable temp directories

volumes:
  pgdata:
